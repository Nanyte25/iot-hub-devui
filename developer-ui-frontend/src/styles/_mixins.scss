@import "_globalVars.scss";

@mixin customScrollbar(
  $scrollbar-width,
  $thumb-color,
  $thumb-border-radius,
  $track-color
) {
  &::-webkit-scrollbar-track,
  &::-webkit-scrollbar {
    background-color: $track-color;
  }
  &::-webkit-scrollbar {
    width: $scrollbar-width;
  }
  &::-webkit-scrollbar-thumb {
    border-radius: $thumb-border-radius;
    background-color: $thumb-color;
  }
}
%btnRegular {
  cursor: pointer;
  font-size: 1.2em;
  border-radius: 0.2rem;
  padding: 0.5rem 2rem;
  svg {
    display: inline-block;
    width: auto; // adjust size with height property only
  }
  &:disabled {
    cursor: not-allowed;
    color: #ccc;
  }
}
@mixin outlineBtn($col) {
  @extend %btnRegular;
  border: 1px solid $col;
  transition: background-color 0.3s ease-out, color 0.3s ease-out;
  background: none;
  color: $col;
  svg {
    height: 1em;
    vertical-align: middle;
    path {
      transition: fill 0.3s ease-out;
      fill: $col;
    }
  }
  &:hover {
    background-color: $col;
    color: #fff;
    svg path {
      fill: #fff !important;
    }
  }
}
// Flat Buttons = No Border
@mixin flatBtn($col, $animationType) {
  @extend %btnRegular;
  border: 0;
  outline: none;
  font-family: "Roboto", "RobotoDraft", "Helvetica Neue, Helvetica, Arial",
    sans-serif;
  background: none;
  color: $col;
  @if $animationType = "" {
    opacity: 0.5;
    transition: opacity 0.18s ease-out;
  }
  &:hover {
    @if $animationType = "" {
      opacity: 1;
    }
    svg {
      @if $animationType == "submit" {
        transform: translateX(0.5em);
      }
      path {
        fill: $col;
      }
    }
  }
  &:disabled {
    &:hover {
      svg {
        @if $animationType == "submit" {
          transform: translateX(0) !important;
        }
        path {
          @if $animationType == "submit" {
            transform: translateX(0) !important;
          }
          fill: #ccc !important;
        }
      }
    }
  }
  svg {
    transition: transform 0.3s ease-out;
    @if $animationType == "submit" {
      transform: translateX(0);
      padding-right: 0.75em;
      height: 0.6em;
    } @else {
      height: 1em;
      vertical-align: middle;
    }
    path {
      @if $animationType == "submit" {
        transition: fill 0.5s ease-out;
        fill: #ccc;
      } @else {
        fill: $col;
      }
    }
  }
}
@mixin formConfigCard($width, $height) {
  position: relative;
  top: calc((100vh - #{$header-height} - 2px) / 2);
  left: 50vw;
  width: $width;
  height: $height;
  transform: translate(-1 * $width / 2, -1 * $height / 2);
  background-color: #fff;
  overflow: hidden;
  border-radius: 4px;
}
@mixin bigSearchbar($width) {
  height: 6rem;
  position: relative;
  input[type="text"] {
    position: relative;
    width: $width;
    height: 100%;
    padding: 12px 20px 12px 40px;
    background-color: #fff;
    background-image: url("../images/searchicon.svg");
    background-size: 2rem 2rem;
    background-position: 10px 20px;
    border-color: #ccc;
    transition: box-shadow 0.2s;
    background-repeat: no-repeat;
    @include focusAnimatedTextField();
    &:hover:not(:focus) {
      box-shadow: inset 0px 0px 0px 1px rgba(45, 62, 80, 0.16);
      color: #2d3e50;
    }
    &:focus {
      z-index: 1;
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08), 0 3px 6px rgba(0, 0, 0, 0.15);
      background-image: url("../images/searchiconBlue.svg") !important;
    }
  }
  .__react_component_tooltip {
    position: absolute !important;
    left: 0 !important;
    top: 6rem !important;
    &:after {
      left: 25px !important;
    }
  }
}
@mixin focusAnimatedTextField() {
  &:focus {
    outline: none;
    ~ .bar {
      &:before,
      &:after {
        width: 50%;
      }
    }
  }
}
